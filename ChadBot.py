import requests
import openai
from flask import Flask, request

app = Flask(__name__)

# Credenciales de Tienda Nube
TIENDA_NUBE_STORE_ID = "TU_TIENDA_ID"
TIENDA_NUBE_ACCESS_TOKEN = "TU_ACCESS_TOKEN"
TIENDA_NUBE_API_URL = f"https://api.tiendanube.com/v1/{TIENDA_NUBE_STORE_ID}/products"

# Credenciales de WhatsApp Cloud API
import os

WHATSAPP_TOKEN = os.environ.get("WHATSAPP_TOKEN")
VERIFY_TOKEN = os.environ.get("mi-token-de-verificaci√≥n")

# Credenciales de OpenAI GPT-4
OPENAI_API_KEY = "TU_OPENAI_API_KEY"

# Clientes en espera de atenci√≥n humana
clientes_en_espera = set()

# Funci√≥n para buscar productos en Tienda Nube
def buscar_producto(nombre_producto):
    headers = {"Authentication": f"Bearer {TIENDA_NUBE_ACCESS_TOKEN}"}
    response = requests.get(TIENDA_NUBE_API_URL, headers=headers)
    productos = response.json()
    
    for producto in productos:
        if nombre_producto.lower() in producto["name"].lower():
            return f"üì¶ {producto['name']}\nüí∞ Precio: ${producto['price']}\nüì¶ Stock: {producto['stock']}\nüîó {producto['permalink']}"

    return None  # No se encontr√≥ el producto

# Funci√≥n para consultar GPT-4 si la pregunta no es un producto ni una respuesta predefinida
def consultar_gpt(mensaje):
    openai.api_key = OPENAI_API_KEY
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": "Eres un asistente de ventas de una tienda de tecnolog√≠a."},
                  {"role": "user", "content": mensaje}]
    )
    return response["choices"][0]["message"]["content"]

# Funci√≥n para manejar los mensajes
def responder_mensaje(remitente, mensaje):
    global clientes_en_espera

    mensaje = mensaje.lower()  # Convertir mensaje a min√∫sculas para comparaci√≥n

    # Diccionario de respuestas personalizadas
    RESPUESTAS = {
        "horarios": "Nuestro horario de atenci√≥n es de lunes a jueves de 10:30 a 21:00 hs, viernes y s√°bados de 10:30 a 22:00 hs.",
        "hola": "Hola! ¬øC√≥mo estas? Gracias por comunicarte con Igeneration Tech Store ¬øEn que te puedo ayudar?",
        "medios de pago": "Aceptamos pagos con transferencia bancaria con un -10% de descuento, MercadoPago, MODO, tarjetas de debito y credito con hasta 6 cuotas sin inter√©s en todo el sitio!",
        "tarjetas": "Si! Aceptamos todas las tarjetas de credito, podes pagar en hasta 6 cuotas sin inter√©s",
        "local": "Estamos en Av. Hipolito Yrigoyen 13.298 Boulevard Shopping 1¬∞ Piso Local 252, Adrogu√©, Buenos Aires. ¬°Te esperamos!",
        "ubicacion": "Estamos en Av. Hipolito Yrigoyen 13.298 Boulevard Shopping 1¬∞ Piso Local 252, Adrogu√©, Buenos Aires. ¬°Te esperamos!",
        "ubicados" : "Estamos en Av. Hipolito Yrigoyen 13.298 Boulevard Shopping 1¬∞ Piso Local 252, Adrogu√©, Buenos Aires. ¬°Te esperamos!",
        "ubicaci√≥n": "Estamos en Av. Hipolito Yrigoyen 13.298 Boulevard Shopping 1¬∞ Piso Local 252, Adrogu√©, Buenos Aires. ¬°Te esperamos!",
        "retirar": "S√≠, podes retirar tu compra por nuestro local en el Boulevard Shopping, Adrogu√©. Te avisaremos en cuanto est√© lista.",
        "env√≠os": "S√≠, realizamos env√≠os a todo el pa√≠s por Correo Argentino o Andreani. Para CABA y GBA tenemos env√≠o gratis con nuestra log√≠stica.",
        "consola retro": "Tenemos varias en stock, se diferencian en la cantidad de juegos y consolas que emulan, te recomiendo la X2 Plus, es la m√°s completa, pero todas estan buenisimas para recordar los juegos clasicos! Te dejo el link https://igeneration.com.ar/consolas/?mpage=2",
        "game stick": "S√≠, tenemos stock. La m√°s completa es el modelo X2 Plus, con mayor variedad de juegos de PS1, PSP y Nintendo 64. Podes ver las opciones en el siguiente enlace: https://igeneration.com.ar/consolas/?mpage=2",
        "productos": "Tenemos una gran variedad de productos de tecnolog√≠a y realidad virtual. ¬øBuscas algo en particular?",
        "tv box": "Tenemos varios modelos con Android oficial para usar aplicaciones como Netflix, Prime, Max con suscripci√≥n. Tambi√©n tenemos gen√©ricos con acceso a series y pel√≠culas. Te dejo el link para que los puedas ver: https://igeneration.com.ar/media-streaming/?mpage=2",
        "garant√≠a": "Todos nuestros productos tienen garant√≠a de 6 o 12 meses por fallas de f√°brica.",
        "conversor": "Tenemos varios modelos con Android oficial para usar aplicaciones como Netflix, Prime, Max con suscripci√≥n. Tambi√©n tenemos gen√©ricos con acceso a series y pel√≠culas. Te dejo el link para que los puedas ver: https://igeneration.com.ar/media-streaming/?mpage=2",
        "cuotas": "S√≠, podes pagar con tarjeta en hasta 6 cuotas sin inter√©s.",
        "gracias": "Gracias a vos! Espero haberte ayudado con la consulta",
        "auriculares": "Si, te paso el link con los modelos disponibles https://igeneration.com.ar/audio/auriculares/?mpage=3",
        "teclados": "Si, te paso el link con los modelos disponibles https://igeneration.com.ar/perifericos/teclados/",
        "mouse": "Si, te paso el link con los modelos disponibles https://igeneration.com.ar/perifericos/mouses/",
        "cbu": "Te paso los datos para realizar la transferencia por tu pedido. Alias: igeneration.galicia - CUIT 30717295362 - Titular: Igeneration SRL."
    }

    # Si el cliente pide atenci√≥n humana
    if mensaje in ["humano", "quiero hablar con alguien", "necesito ayuda"]:
        clientes_en_espera.add(remitente)
        return "üßë‚Äçüíº Hace click en el enlace https://wa.me/5491153876227 y te pondremos en contacto con un asesor comercial en breve."

    # Si el cliente est√° en espera de atenci√≥n humana, no responde autom√°ticamente
    if remitente in clientes_en_espera:
        return None

    # Buscar si el mensaje coincide con alguna pregunta frecuente
    for clave, respuesta in RESPUESTAS.items():
        if clave in mensaje:
            return respuesta

    # Respuesta por defecto si no coincide con ninguna pregunta
    return "No entend√≠ tu consulta. ¬øPodr√≠as reformularla o darme m√°s detalles?"

    # Temporalmente, desactivamos Tienda Nube si no est√° configurada
    if "TIENDA_NUBE_ACCESS_TOKEN" not in globals() or not TIENDA_NUBE_ACCESS_TOKEN:
        print("‚ö† Tienda Nube no est√° configurada. Respondiendo con mensaje por defecto.")
        return "ü§ñ Lo siento, la consulta sobre productos a√∫n no est√° disponible."

    # Temporalmente, desactivamos GPT-4 si no est√° configurado
    if "OPENAI_API_KEY" not in globals() or not OPENAI_API_KEY:
        print("‚ö† GPT-4 no est√° configurado. Respondiendo con mensaje por defecto.")
        return "ü§ñ Lo siento, a√∫n no puedo responder preguntas generales."

    # Si ya tienes Tienda Nube configurado, puedes activar esta l√≠nea m√°s adelante:
    # respuesta_producto = buscar_producto(mensaje)
    # if respuesta_producto:
    #     return respuesta_producto

    # Si ya tienes GPT-4 configurado, puedes activar esta l√≠nea m√°s adelante:
    # return consultar_gpt(mensaje)

    return "ü§ñ No entend√≠ tu consulta. ¬øPuedes reformularla?"

# Webhook de WhatsApp
from flask import Flask, request

app = Flask(__name__)

VERIFY_TOKEN = "mi-token-de-verificaci√≥n"

import sys

import requests

@app.route("/webhook", methods=["POST"])
def webhook():
    print("üì© Se recibi√≥ un POST en /webhook")
    sys.stdout.flush()

    try:
        raw_data = request.data
        json_data = request.get_json(silent=True)

        print(f"üì© JSON recibido: {json_data}")
        sys.stdout.flush()

        if "messages" in json_data["entry"][0]["changes"][0]["value"]:
            mensaje = json_data["entry"][0]["changes"][0]["value"]["messages"][0]["text"]["body"]
            remitente = json_data["entry"][0]["changes"][0]["value"]["messages"][0]["from"]
            
            print(f"üì© Mensaje recibido: {mensaje} de {remitente}")
            sys.stdout.flush()

            # Llamar a la funci√≥n correcta (antes llamaba a procesar_mensaje)
            respuesta = responder_mensaje(remitente, mensaje)

            # Si la respuesta no es None, enviarla
            if respuesta:
                enviar_respuesta(remitente, respuesta)

        return "OK", 200

    except Exception as e:
        print(f"‚ùå Error al procesar la solicitud: {str(e)}")
        sys.stdout.flush()
        return "Error", 500

    except Exception as e:
        print(f"‚ùå Error al procesar la solicitud: {str(e)}")
        sys.stdout.flush()
        return "Error", 500

    except Exception as e:
        print(f"‚ùå Error al procesar la solicitud: {str(e)}")
        sys.stdout.flush()
        return "Error", 500


# Funci√≥n para enviar mensajes de WhatsApp

import time

def enviar_respuesta(numero, mensaje):
    time.sleep(2)  # Agrega una pausa de 2 segundos antes de responder

    url = "https://graph.facebook.com/v18.0/602432446282342/messages"
    headers = {
        "Authorization": f"Bearer EAAHz1wFDZCQABOxZCWHVRs0XdkSrCaKLbvHyS2ABw3tnnZBtgG4fLE4houMZBUiaxMiXUoLsvCOyycuXiSmAMM32Wk2auVWXJikqOAwhOSjdT4ZChdYUYabKzic9aLjk2JV12vmUfw9MEsqwwF3hYzswZCnEsKwwKZChbDxjbgmkRB1zThymTxK3WH4XcmrUZBEGgOGtzAZDZD",
        "Content-Type": "application/json"
    }
    data = {
        "messaging_product": "whatsapp",
        "to": numero,
        "type": "text",
        "text": {"body": mensaje}
    }

    response = requests.post(url, headers=headers, json=data)

    print(f"‚úÖ Respuesta enviada a {numero}: {mensaje}")
    print(f"üì© Respuesta API: {response.json()}")
    sys.stdout.flush()


import os

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))  # Usa el puerto asignado por Render
    app.run(host="0.0.0.0", port=port)  # Escucha en todas las interfaces

